{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/i18n-config.ts"],"sourcesContent":["export const i18n = {\n    defaultLocale: \"uz\",\n    locales: [\"en\", \"ru\", \"uz\"],\n  } as const;\n  \n  export type Locale = (typeof i18n)[\"locales\"][number];"],"names":[],"mappings":";;;AAAO,MAAM,OAAO;IAChB,eAAe;IACf,SAAS;QAAC;QAAM;QAAM;KAAK;AAC7B"}},
    {"offset": {"line": 40, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/middleware.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport type { NextRequest } from \"next/server\";\n\nimport { i18n } from \"./i18n-config\";\n\nimport { match as matchLocale } from \"@formatjs/intl-localematcher\";\nimport Negotiator from \"negotiator\";\n\nfunction getLocale(request: NextRequest): string | undefined {\n  // Negotiator expects plain object so we need to transform headers\n  const negotiatorHeaders: Record<string, string> = {};\n  request.headers.forEach((value, key) => (negotiatorHeaders[key] = value));\n\n  // @ts-ignore locales are readonly\n  const locales: string[] = i18n.locales;\n\n  // Use negotiator and intl-localematcher to get best locale\n  let languages = new Negotiator({ headers: negotiatorHeaders }).languages(\n    locales,\n  );\n\n  const locale = matchLocale(languages, locales, i18n.defaultLocale);\n\n  return locale;\n}\n\nexport function middleware(request: NextRequest) {\n  const pathname = request.nextUrl.pathname;\n  // Check if there is any supported locale in the pathname\n  const pathnameIsMissingLocale = i18n.locales.every(\n    (locale) =>\n      !pathname.startsWith(`/${locale}/`) && pathname !== `/${locale}`,\n  );\n\n  // Redirect if there is no locale\n  if (pathnameIsMissingLocale) {\n    const locale = getLocale(request);\n\n    // e.g. incoming request is /products\n    // The new URL is now /en-US/products\n    return NextResponse.redirect(\n      new URL(\n        `/${locale}${pathname.startsWith(\"/\") ? \"\" : \"/\"}${pathname}`,\n        request.url,\n      ),\n    );\n  }\n}\n\nexport const config = {\n  matcher: [\n    \"/((?!api|_next/static|_next/image|favicon.ico|manifest.json|.*\\\\.(?:jpg|jpeg|png|svg|webp|ico)).*)\",\n  ],\n};\n"],"names":[],"mappings":";;;;AAAA;AAAA;AAGA;AAEA;AAAA;AACA;;;;;AAEA,SAAS,UAAU,OAAoB;IACrC,kEAAkE;IAClE,MAAM,oBAA4C,CAAC;IACnD,QAAQ,OAAO,CAAC,OAAO,CAAC,CAAC,OAAO,MAAS,iBAAiB,CAAC,IAAI,GAAG;IAElE,kCAAkC;IAClC,MAAM,UAAoB,sHAAA,CAAA,OAAI,CAAC,OAAO;IAEtC,2DAA2D;IAC3D,IAAI,YAAY,IAAI,2IAAA,CAAA,UAAU,CAAC;QAAE,SAAS;IAAkB,GAAG,SAAS,CACtE;IAGF,MAAM,SAAS,CAAA,GAAA,2LAAA,CAAA,QAAW,AAAD,EAAE,WAAW,SAAS,sHAAA,CAAA,OAAI,CAAC,aAAa;IAEjE,OAAO;AACT;AAEO,SAAS,WAAW,OAAoB;IAC7C,MAAM,WAAW,QAAQ,OAAO,CAAC,QAAQ;IACzC,yDAAyD;IACzD,MAAM,0BAA0B,sHAAA,CAAA,OAAI,CAAC,OAAO,CAAC,KAAK,CAChD,CAAC,SACC,CAAC,SAAS,UAAU,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,KAAK,aAAa,CAAC,CAAC,EAAE,QAAQ;IAGpE,iCAAiC;IACjC,IAAI,yBAAyB;QAC3B,MAAM,SAAS,UAAU;QAEzB,qCAAqC;QACrC,qCAAqC;QACrC,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAC1B,IAAI,IACF,CAAC,CAAC,EAAE,SAAS,SAAS,UAAU,CAAC,OAAO,KAAK,MAAM,UAAU,EAC7D,QAAQ,GAAG;IAGjB;AACF;AAEO,MAAM,SAAS;IACpB,SAAS;QACP;KACD;AACH"}}]
}